---
import ThemeChange from '../components/layouts/ThemeChange.svelte';

const menus = [
	{ name: '作业辅导', id: 'c1' },
	{ name: '书屋', id: 'c2' },
	{ name: '兴趣课程', id: 'c3' },
];
---

<div class="navbar fixed top-0 z-30 bg-base-200">
	<div class="navbar-start">
		<div class="dropdown">
			<div tabindex="0" role="button" class="btn btn-ghost lg:hidden">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-5 w-5"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
					><path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M4 6h16M4 12h8m-8 6h16"></path></svg
				>
			</div>
			<ul
				tabindex="0"
				class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52"
			>
				{
					menus.map((menu) => (
						<li>
							<a>{menu.name}</a>
						</li>
					))
				}
			</ul>
		</div>
		<a class="btn btn-ghost text-lg px-3" id="toTop"> 卡卡的课后空间 </a>
	</div>
	<div class="navbar-center hidden lg:flex">
		<ul class="menu menu-horizontal px-1">
			{
				menus.map((menu, index) => (
					<li class={index !== 0 ? 'ml-2' : ''}>
						<a class="btn btn-sm" id={menu.id}>
							{menu.name}
						</a>
					</li>
				))
			}
		</ul>
	</div>
	<div class="navbar-end">
		<ThemeChange client:only="svelte" />
	</div>
</div>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function () {
		// 获取按钮元素
		const button = document.getElementById('toTop');

		// 添加点击事件监听器
		button.addEventListener('click', () => {
			window.scrollTo({
				top: 0,
				behavior: 'smooth',
			});
		});

		// 定义按钮和区域的映射关系
		const buttonAreaMap = {
			c1: 'homework',
			c2: 'bookstore',
			c3: 'hobby-team',
		};

		// 添加点击事件监听器
		for (const buttonId in buttonAreaMap) {
			const button = document.getElementById(buttonId);
			const area = document.getElementById(buttonAreaMap[buttonId]);
			button.addEventListener('click', () => {
				area.scrollIntoView({ behavior: 'smooth' });
			});
		}

		// 添加滚动事件监听器
		window.addEventListener('scroll', () => {
			let activeButtonId = null;
			for (const buttonId in buttonAreaMap) {
				const area = document.getElementById(buttonAreaMap[buttonId]);
				if (
					window.scrollY >= area.offsetTop - (window.innerHeight - 192) &&
					window.scrollY < area.offsetTop + area.offsetHeight
				) {
					activeButtonId = buttonId;
				}
			}
			for (const buttonId in buttonAreaMap) {
				const button = document.getElementById(buttonId);
				if (buttonId === activeButtonId) {
					button.classList.add('btn-active');
				} else {
					button.classList.remove('btn-active');
				}
			}
		});
	});
</script>
